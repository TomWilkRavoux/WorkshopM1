import os
from flask import Flask
from flask_socketio import SocketIO, emit, join_room, leave_room
import time
import threading

app = Flask(__name__)
socketio = SocketIO(app, cors_allowed_origins="*")



# Solutions correctes pour chaque maladie
SOLUTIONS = {
    "Grippe saisonni√®re": ["Parac√©tamol", "Oseltamivir"],
    "Angine bact√©rienne": ["Amoxicilline", "Parac√©tamol"],
    "Gastro-ent√©rite": ["R√©gidron", "Rac√©cadotril"],
    "Covid-19 (forme l√©g√®re)": ["Parac√©tamol", "Vitamine D"]
}

rooms = {}

@app.route("/api/test")
def test():
    return {"message": "Backend Flask pr√™t"}

@socketio.on("connect")
def on_connect():
    print("‚úÖ Un client est connect√© !")
    emit("server_message", {"msg": "Bienvenue sur Flask-SocketIO !"})

@socketio.on("disconnect")
def on_disconnect():
    print("‚ùå Un client s'est d√©connect√©.")

@socketio.on("join_room")
def join_room_event(data):
    username = data.get("username")
    room = data.get("room")

    join_room(room)
    print(f"üë§ {username} a rejoint la salle {room}")
    
    # Si la room existe et a des joueurs pr√™ts, les envoyer au nouveau joueur
    if room in rooms and rooms[room]["ready_players"]:
        emit("player_status_update", {
            "ready_players": list(rooms[room]["ready_players"].keys()),
            "total_ready": len(rooms[room]["ready_players"])
        })
        print(f"üìä Envoi du statut actuel √† {username}: {list(rooms[room]['ready_players'].keys())}")
    
    emit("server_message", {"msg": f"{username} a rejoint la salle {room}"}, to=room)

# √âv√©nement pour r√©initialiser une room (seulement quand n√©cessaire)
@socketio.on("reset_room")
def reset_room(data):
    room = data.get("room")
    if room in rooms:
        # Arr√™ter le timer s'il existe
        if rooms[room].get("thread"):
            rooms[room]["game_over"] = True
            rooms[room]["thread"] = None
        
        # R√©initialiser compl√®tement la room
        del rooms[room]
        print(f"üîÑ Room {room} r√©initialis√©e")
        emit("room_reset", {"msg": "Room r√©initialis√©e"}, room=room)

@socketio.on("player_ready")
def player_ready(data):
    username = data.get("username")
    room = data.get("room")
    role = data.get("role")
    
    print(f"üéÆ Player ready re√ßu: {username} ({role}) dans {room}")
    
    # Cr√©er la room si elle n'existe pas
    if room not in rooms:
        rooms[room] = {
            "users": set(), 
            "timer": 0, 
            "thread": None, 
            "ready_players": {},
            "diagnosis": None,
            "medications": [],
            "game_over": False
        }
        print(f"üè† Nouvelle room cr√©√©e: {room}")
    
    #Seulement r√©initialiser si le jeu √©tait vraiment termin√© ET qu'on essaie de rejouer
    if rooms[room].get("game_over", False):
        print(f"üîÑ Game over d√©tect√©, r√©initialisation de {room}")
        # Arr√™ter l'ancien thread s'il existe
        if rooms[room].get("thread"):
            rooms[room]["thread"] = None
        
        # R√©initialiser la room
        rooms[room] = {
            "users": set(), 
            "timer": 0, 
            "thread": None, 
            "ready_players": {},
            "diagnosis": None,
            "medications": [],
            "game_over": False
        }
    
    # Ajouter le joueur comme pr√™t
    rooms[room]["ready_players"][username] = {"role": role, "ready": True}
    print(f"üìä Joueurs pr√™ts dans {room}: {list(rooms[room]['ready_players'].keys())}")
    
    # Messages √† toute la room
    emit("server_message", {"msg": f"{username} ({role}) est pr√™t !"}, room=room)

    # Toujours envoyer le statut √† TOUTE la room
    emit("player_status_update", {
        "ready_players": list(rooms[room]["ready_players"].keys()),
        "total_ready": len(rooms[room]["ready_players"])
    }, room=room)
    
    print(f"üì° Status envoy√© √† la room {room}: {len(rooms[room]['ready_players'])} joueurs")
    
    # V√©rifier si on peut d√©marrer (2 joueurs avec r√¥les diff√©rents)
    if len(rooms[room]["ready_players"]) >= 2:
        roles = [player["role"] for player in rooms[room]["ready_players"].values()]
        has_medecin = "M√©decin" in roles
        has_pharmacien = "Pharmacien" in roles
        
        print(f"üé≠ R√¥les pr√©sents: {roles}")
        
        if has_medecin and has_pharmacien:
            emit("all_players_ready", {"msg": "Tous les joueurs sont pr√™ts ! Lancement du jeu..."}, room=room)
            
            # D√©marrer le timer seulement si aucun n'est en cours
            if not rooms[room]["thread"]:
                t = threading.Thread(target=start_timer, args=(room, 600))
                rooms[room]["thread"] = t
                t.start()
                emit("game_started", {"msg": "üéÆ Partie d√©marr√©e ! Vous avez 10 minutes.", "duration": 600}, room=room)
            
            print(f"[GAME START] Room {room} - 2 joueurs pr√™ts (M√©decin + Pharmacien), timer lanc√©")
        else:
            emit("server_message", {"msg": "‚ö†Ô∏è Il faut un M√©decin ET un Pharmacien pour commencer !"}, room=room)
            print(f"‚ö†Ô∏è R√¥les incomplets dans {room}: {roles}")

# Fonctions existantes...
def cleanup_room(room):
    if room in rooms:
        if rooms[room].get("thread"):
            rooms[room]["game_over"] = True
            rooms[room]["thread"] = None
        print(f"üßπ Nettoyage de la room {room}")

@socketio.on("submit_diagnosis")
def submit_diagnosis(data):
    username = data.get("username")
    room = data.get("room")
    diagnosis = data.get("diagnosis")
    
    if room not in rooms or rooms[room].get("game_over", False):
        return
    
    rooms[room]["diagnosis"] = diagnosis
    print(f"[DIAGNOSIS] {room} - {username}: {diagnosis}")
    
    emit("diagnosis_submitted", {
        "username": username,
        "diagnosis": diagnosis
    }, room=room)

@socketio.on("submit_medication")
def submit_medication(data):
    username = data.get("username")
    room = data.get("room")
    medication = data.get("medication")
    
    if room not in rooms or rooms[room].get("game_over", False):
        return
    
    if medication not in rooms[room]["medications"]:
        rooms[room]["medications"].append(medication)
    
    print(f"[MEDICATION] {room} - {username}: {medication}")
    
    emit("medication_submitted", {
        "username": username,
        "medication": medication,
        "current_medications": rooms[room]["medications"]
    }, room=room)



@socketio.on("remove_medication")
def remove_medication(data):
    username = data.get("username")
    room = data.get("room")
    medication = data.get("medication")
    
    if room not in rooms or rooms[room].get("game_over", False):
        return
    
    if medication in rooms[room]["medications"]:
        rooms[room]["medications"].remove(medication)
    
    print(f"[MEDICATION REMOVED] {room} - {username}: {medication}")
    
    emit("medication_removed", {
        "username": username,
        "medication": medication,
        "current_medications": rooms[room]["medications"]
    }, room=room)


@socketio.on("validate_solution")
def validate_solution(data):
    room = data.get("room")
    
    if room not in rooms or rooms[room].get("game_over", False):
        return
    
    diagnosis = rooms[room]["diagnosis"]
    medications = rooms[room]["medications"]
    
    print(f"[VALIDATION] Room {room} - Diagnostic: {diagnosis}, M√©dicaments: {medications}")
    
    # V√©rifier si la solution est correcte
    if diagnosis in SOLUTIONS:
        correct_medications = SOLUTIONS[diagnosis]
        is_correct = set(medications) == set(correct_medications)
        
        if is_correct:
            # Victoire !
            rooms[room]["game_over"] = True
            rooms[room]["timer"] = 0
            print(f"[VICTOIRE] Room {room}")
            emit("game_result", {
                "result": "victory",
                "diagnosis": diagnosis,
                "medications": medications
            }, room=room)
        else:
            # D√©faite - mauvais m√©dicaments
            rooms[room]["game_over"] = True
            rooms[room]["timer"] = 0
            print(f"[D√âFAITE] Room {room} - Mauvais m√©dicaments")
            emit("game_result", {
                "result": "defeat",
                "reason": "wrong_medications",
                "diagnosis": diagnosis,
                "medications": medications,
                "correct_medications": correct_medications
            }, room=room)
    else:
        # D√©faite - mauvais diagnostic
        rooms[room]["game_over"] = True
        rooms[room]["timer"] = 0
        print(f"[D√âFAITE] Room {room} - Mauvais diagnostic")
        emit("game_result", {
            "result": "defeat",
            "reason": "wrong_diagnosis",
            "diagnosis": diagnosis,
            "medications": medications
        }, room=room)

@socketio.on("chat_message")
def chat(data):
    room = data.get("room")
    username = data.get("username")
    msg = data.get("msg")
    print(f"[CHAT] {room} | {username}: {msg}")
    emit("chat_response", {"username": username, "msg": msg}, room=room)

def start_timer(room, duration):
    print(f"[TIMER] Lancement du timer {duration}s pour {room}")
    if room in rooms:
        rooms[room]["timer"] = duration
        while rooms[room]["timer"] > 0 and not rooms[room].get("game_over", False):
            time.sleep(1)
            rooms[room]["timer"] -= 1
            socketio.emit("timer_update", {"time": rooms[room]["timer"]}, room=room)
        
        if not rooms[room].get("game_over", False):
            # Temps √©coul√© = d√©faite
            rooms[room]["game_over"] = True
            print(f"[TIMEOUT] Room {room}")
            socketio.emit("game_result", {
                "result": "defeat",
                "reason": "timeout"
            }, room=room)
        
        rooms[room]["thread"] = None

@socketio.on("start_game")
def start_game(data):
    room = data.get("room")
    duration = data.get("duration", 60)
    if room not in rooms:
        rooms[room] = {"users": set(), "timer": duration, "thread": None}

    if not rooms[room].get("thread"):
        t = threading.Thread(target=start_timer, args=(room, duration))
        rooms[room]["thread"] = t
        t.start()
        emit("server_message", {"msg": f"‚è≥ Partie lanc√©e ({duration}s)!"}, room=room)
    else:
        emit("server_message", {"msg": "‚ö†Ô∏è Une partie est d√©j√† en cours."}, room=room)

# if __name__ == "__main__":
#     socketio.run(app, host="0.0.0.0", port=5000)
#     print("üöÄ Serveur Flask d√©marr√© sur http://localhost:5000")

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    socketio.run(app, host="0.0.0.0", port=port)
    print(f"üöÄ Serveur Flask d√©marr√© sur le port {port}")